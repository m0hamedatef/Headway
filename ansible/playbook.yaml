- name: Install Jenkins on Ubuntu
  hosts: all
  become: yes
  vars:
    ansible_user: ubuntu

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        
    - name: Install curl
      apt:
        name: curl
        state: present

    - name: Install gnupg
      apt:
        name: gnupg
        state: present

    - name: Add Jenkins APT keyring
      shell: "curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key | sudo tee /usr/share/keyrings/jenkins-keyring.asc"
      args:
        executable: /bin/bash

    - name: Add Jenkins APT repository
      shell: sudo sh -c 'echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
      args:
        executable: /bin/bash

    - name: Install Java
      apt:
        name: openjdk-17-jre
        state: present

    - name: Update package cache
      apt:
        update_cache: yes
        
    - name: Install Jenkins
      apt:
        name: jenkins
        state: present

    - name: Start Jenkins service
      service:
        name: jenkins
        state: started
        enabled: yes

    - name: Retrieve initialAdminPassword file
      fetch:
        src: /var/lib/jenkins/secrets/initialAdminPassword
        dest: "{{ playbook_dir }}/initialAdminPassword"
        flat: yes

    - name: Install packages required for Docker
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - software-properties-common

        state: present

    - name: Add Docker's official GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker APT repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable
        state: present

    - name: Install Docker
      apt:
        name: docker-ce
        state: present

    - name: Install Docker Compose
      apt:
        name: docker-compose
        state: present

    - name: Add ubuntu user to docker group
      user:
        name: ubuntu
        groups: docker
        append: yes
    
    - name: Add jenkins user to docker group
      user:
        name: jenkins
        groups: docker
        append: yes


    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: yes

    - name: Change permission of Docker socket
      file:
        path: /var/run/docker.sock
        mode: "0777"


    - name: Install dependencies
      apt:
        name:
          - unzip
          - zip
        state: present

    - name: Download AWS CLI
      get_url:
        url: "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
        dest: "/tmp/awscliv2.zip"

    - name: Unzip AWS CLI package
      unarchive:
        src: "/tmp/awscliv2.zip"
        dest: "/tmp"
        remote_src: yes

    - name: Install AWS CLI
      command: "/tmp/aws/install"
      
    - name: Get the stable kubectl version
      shell: "curl -sL https://dl.k8s.io/release/stable.txt"
      register: kubectl_version
      changed_when: false
      failed_when: kubectl_version.stdout is undefined or kubectl_version.stdout == '' or kubectl_version.stdout | regex_search('html')

    - name: Debug kubectl version
      debug:
        msg: "kubectl version: {{ kubectl_version.stdout }}"

    - name: Download kubectl binary
      get_url:
        url: "https://dl.k8s.io/release/{{ kubectl_version.stdout }}/bin/linux/amd64/kubectl"
        dest: /tmp/kubectl
        mode: '0755'
      when: kubectl_version.stdout is defined and kubectl_version.stdout != '' and not kubectl_version.stdout | regex_search('html')

    - name: Download kubectl checksum
      get_url:
        url: "https://dl.k8s.io/release/{{ kubectl_version.stdout }}/bin/linux/amd64/kubectl.sha256"
        dest: /tmp/kubectl.sha256
        mode: '0644'
      when: kubectl_version.stdout is defined and kubectl_version.stdout != '' and not kubectl_version.stdout | regex_search('html')

    - name: Verify kubectl binary
      shell: |
        echo "$(cat /tmp/kubectl.sha256)  /tmp/kubectl" | sha256sum --check
      register: kubectl_checksum
      when: kubectl_version.stdout is defined and kubectl_version.stdout != '' and not kubectl_version.stdout | regex_search('html')

    - name: Install kubectl
      become: true
      copy:
        src: /tmp/kubectl
        dest: /usr/local/bin/kubectl
        mode: '0755'
        remote_src: yes
      when: kubectl_checksum.rc == 0

    - name: Verify kubectl version
      command: kubectl version --client
      register: kubectl_version_check
      changed_when: false

    - debug:
        msg: "kubectl version: {{ kubectl_version_check.stdout }}"